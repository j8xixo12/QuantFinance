#ifndef RNGENERATOR_HPP_
#define RNGENERATOR_HPP_

#include <vector>
#include <random>
#include <initializer_list>

template<typename T, template<typename TT> class Dist,
        template<typename TTT, typename Alloc> class Container = std::vector, typename Alloc = std::allocator<T>>

class RNGenerator {
    private:
        Dist<T> dist;
        std::default_random_engine eng;

    public:
        RNGenerator() = default;
        template <typename... Args> RNGenerator(Args... args)
        : dist (Dist<T>(args...)), eng(std::default_random_engine()) {
            // Hard-coded 
            std::random_device rd; 
            eng.seed(rd());
        }

        template<typename T2> RNGenerator(const std::initializer_list<T2>&
                                        initList)
        : dist(initList), eng(std::default_random_engine()) {
            // Hard-coded 
            std::random_device rd; 
            eng.seed(rd());
        }

        T operator() () { 
            // STL-compatible function
            return dist(eng);
        }

        // Template member function using template template parameter trick
        Container<T, Alloc> RandomArray(std::size_t n) {
            Container<T, Alloc> result(n);
            // STL algorithm to assign values generated by a call to this->() 
            std::generate(std::begin(result), std::end(result), *this);
            return result;
        }

        Container<T, Alloc> RandomArrayII(std::size_t n) { 
            // Second approach
            Container<T, Alloc> result(n);
            // STL algorithm to assign values generated by a call to this->() 
            for (std::size_t i = 0; i < result.size(); ++i) {
                result[i] = (*this)();
            }
            return result;
        }

        void Randomise(std::size_t count, Container<T, Alloc>& con) { 
            // Assign random values to the first count elements of
            // container 'con'
            std::generate_n(std::begin(con), count, *this);
        }

};
#endif // RNGENERATOR_HPP_